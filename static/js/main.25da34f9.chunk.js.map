{"version":3,"sources":["components/Board.js","DispatchContext.js","components/Card.js","components/Deck.js","components/CreateCard.js","data.js","StateContext.js","index.js"],"names":["Board","props","className","children","DispatchContext","createContext","Card","dispatch","useContext","head","style","color","onClick","e","preventDefault","type","card","deckI","id","taskI","task","tail","Deck","tasks","map","CreateCard","useState","newItem","setNewItem","itemInput","useRef","handleAdd","Boolean","content","current","focus","useEffect","setTimeout","onSubmit","ref","onChange","target","value","data","name","backgroundColor","StateContext","Main","persistedList","localStorage","getItem","initialState","list","JSON","parse","useReducer","state","action","movedItem","newList","stringify","splice","push","setItem","Error","document","title","window","scrollTo","Provider","item","itemI","length","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.25da34f9.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Board(props) {\n  return <div className=\"board\">{props.children}</div>\n}\nexport default Board\n","import { createContext } from \"react\"\n\nconst DispatchContext = createContext()\n\nexport default DispatchContext\n","import React, { useContext } from \"react\"\n\nimport DispatchContext from \"../DispatchContext\"\n\nfunction Card(props) {\n  const { dispatch } = useContext(DispatchContext)\n\n  function handleClickLeft(e) {\n    e.preventDefault()\n    dispatch({\n      type: \"moveLeft\",\n      card: { deckI: props.id, taskI: props.taskI }\n    })\n  }\n  function handleClickRight(e) {\n    e.preventDefault()\n    dispatch({\n      type: \"moveRight\",\n      card: { deckI: props.id, taskI: props.taskI }\n    })\n  }\n  return (\n    <div className=\"card\">\n      {props.head ? (\n        <span> </span>\n      ) : (\n        <span style={{ color: props.color }} onClick={handleClickLeft}>\n          {\"◄\"}\n        </span>\n      )}\n      <p>{props.task}</p>\n      {props.tail ? (\n        <span> </span>\n      ) : (\n        <span style={{ color: props.color }} onClick={handleClickRight}>\n          {\"►\"}\n        </span>\n      )}\n    </div>\n  )\n}\nexport default Card\n","import React from \"react\"\nimport Card from \"./Card\"\n\nfunction Deck(props) {\n  return props.tasks.map((task, taskI) => (\n    <Card\n      head={props.head}\n      tail={props.tail}\n      key={`${task}${taskI}`}\n      task={task}\n      taskI={taskI}\n      id={props.id}\n      color={props.color}\n    />\n  ))\n}\nexport default Deck\n","import React, { useState, useEffect, useRef, useContext } from \"react\"\n\nimport DispatchContext from \"../DispatchContext\"\n\nfunction CreateCard(props) {\n  const { dispatch } = useContext(DispatchContext)\n\n  const [newItem, setNewItem] = useState(\"\")\n  const itemInput = useRef(null)\n  useEffect(() => {\n    setTimeout(() => itemInput.current.focus(), 0)\n  }, [])\n\n  function handleAdd(e) {\n    e.preventDefault()\n\n    if (!Boolean(newItem)) return\n\n    dispatch({ type: \"create\", card: { content: newItem } })\n\n    setNewItem(\"\")\n    itemInput.current.focus()\n  }\n  return (\n    <div className=\"create-item\">\n      <form onSubmit={handleAdd}>\n        <input\n          ref={itemInput}\n          onChange={e => setNewItem(e.target.value)}\n          value={newItem}\n        />\n        <button onClick={handleAdd} className=\"btn btn-primary\">\n          +\n        </button>\n      </form>\n    </div>\n  )\n}\nexport default CreateCard\n","const data = [\n  {\n    id: 1,\n    name: \"Open\",\n    style: { backgroundColor: \"#344759\" },\n    tasks: []\n  },\n  {\n    id: 2,\n    name: \"In Progress\",\n    style: { backgroundColor: \"#39a59c\" },\n    tasks: []\n  },\n  {\n    id: 3,\n    name: \"In Review\",\n    style: { backgroundColor: \"#8e6e95\" },\n    tasks: []\n  },\n  {\n    id: 4,\n    name: \"Done\",\n    style: { backgroundColor: \"#e8741e\" },\n    tasks: []\n  }\n]\nexport default data\n","import { createContext } from \"react\"\n\nconst StateContext = createContext()\n\nexport default StateContext\n","import React, { useEffect, useState, useReducer } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Board from \"./components/Board\"\r\nimport Deck from \"./components/Deck\"\r\nimport CreateCard from \"./components/CreateCard\"\r\nimport data from \"./data\"\r\nimport \"./assets/css/main.css\"\r\n\r\nimport DispatchContext from \"./DispatchContext\"\r\nimport StateContext from \"./StateContext\"\r\n\r\nfunction Main(props) {\r\n  const persistedList = localStorage.getItem(\"boardappList\")\r\n  const initialState = {\r\n    list: (persistedList && JSON.parse(persistedList)) || data\r\n  }\r\n\r\n  function reducer(state, action) {\r\n    const { deckI, taskI, content } = action.card\r\n\r\n    // clone prev list\r\n    let newList = JSON.parse(JSON.stringify(state.list))\r\n    let movedItem\r\n\r\n    switch (action.type) {\r\n      case \"moveLeft\":\r\n        // sub from current by splicing out itself\r\n        movedItem = newList[deckI].tasks.splice(taskI, 1)\r\n        // add spliced out item to the left [id - 1] item\r\n        newList[deckI - 1].tasks.push(movedItem)\r\n        return { list: newList }\r\n\r\n      case \"moveRight\":\r\n        // sub from current by splicing out itself\r\n        movedItem = newList[deckI].tasks.splice(taskI, 1)\r\n        // add spliced out item to the right [id + 1] item\r\n        newList[deckI + 1].tasks.push(movedItem)\r\n        localStorage.setItem(\"boardappList\", JSON.stringify(newList))\r\n        return { list: newList }\r\n\r\n      case \"create\":\r\n        newList[0].tasks.push(content)\r\n        return { list: newList }\r\n\r\n      default:\r\n        throw new Error()\r\n    }\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  useEffect(() => {\r\n    document.title = `${props.title}`\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"boardappList\", JSON.stringify(state.list))\r\n  }, [state.list])\r\n\r\n  return (\r\n    <StateContext.Provider value={{ state }}>\r\n      <DispatchContext.Provider value={{ dispatch }}>\r\n        <Board title=\"Board App\">\r\n          {state.list.map((item, itemI) => (\r\n            <div key={item.id} className=\"container\">\r\n              <div className=\"header\" style={item.style}>\r\n                {item.name}\r\n              </div>\r\n              <Deck\r\n                head={itemI === 0}\r\n                tail={itemI === state.list.length - 1}\r\n                id={itemI}\r\n                tasks={item.tasks}\r\n                color={item.style.backgroundColor}\r\n              />\r\n              {item.name !== \"Open\" ? \"\" : <CreateCard />}\r\n            </div>\r\n          ))}\r\n        </Board>\r\n      </DispatchContext.Provider>\r\n    </StateContext.Provider>\r\n  )\r\n}\r\n\r\nReactDOM.render(<Main title=\"Board App\" />, document.querySelector(\"#root\"))\r\n"],"sourceRoot":""}